'.source.python':

# Odoo objects

    'Create New Odoo Master Data Object':
        'prefix': 'odoo_object_master'
        'body': """
            class ${1:NewModule}(models.Model):
                _name = "${2:module.name}"
                _description = "${4:Module description}"

                name = fields.Char(
                    string="${5:Name}",
                    required=True,
                )
                code = fields.Code(
                    string="Code",
                )
                active = fields.Boolean(
                    string="Active",
                    default=True,
                )
                note = fields.Text(
                    string="Note"
                )
        """

    'Create New Odoo Master Data With Sequence Object':
        'prefix': 'odoo_object_master_sequence'
        'body': """
            class ${1:NewModule}(models.Model):
                _name = "${2:module.name}"
                _description = "${4:Module description}"
                _order = "sequence, id"

                name = fields.Char(
                    string="${5:Name}",
                    required=True,
                )
                code = fields.Code(
                    string="Code",
                )
                sequence = fields.Integer(
                    string="Sequence",
                    required=True,
                    default=True,
                )
                active = fields.Boolean(
                    string="Active",
                    default=True,
                )
                note = fields.Text(
                    string="Note"
                )
        """

    'Create New Odoo Transactional Data':
        'prefix': 'odoo_object_transaction'
        'body': """
            class ${1:NewModule}(models.Model):
                _name = "${2:module.name}"
                _description = "${4:Module description}"
                _inherit = [
                    "mail.thread",
                    "base.sequence_document",
                    "base.workflow_policy_object",
                    "base.document_version",
                ]

                @api.model
                def _default_company_id(self):
                    return self.env.user.company_id

                @api.multi
                @api.depends(
                    "${5:Field1}",
                )
                def _compute_policy(self):
                    _super = super(${1:NewModule}, self)
                    _super._compute_policy()

                name = fields.Char(
                    string="${6:Name}",
                    required=True,
                    default="/",
                    copy=False,
                    readonly=True,
                    states={
                        "draft": [
                            ("readonly", False),
                        ],
                    },
                )
                company_id = fields.Many2one(
                    string="Company",
                    comodel_name="res.company",
                    required=True,
                    default=lambda self: self._default_company_id(),
                )
                state = fields.Selection(
                    string="State",
                    copy=False,
                    selection=[
                        ("draft", "Draft"),
                        ("confirm", "Waiting for Approval"),
                        ("approve", "Approved"),
                        ("open", "${7:On Progress}"),
                        ("done", "${8:Done}"),
                        ("cancel", "Cancelled"),
                    ],
                    required=True,
                    readonly=True,
                    default="draft",
                )
                note = fields.Text(
                    string="Note",
                )

                # Log Fields
                confirm_date = fields.Datetime(
                    string="Confirmation Date",
                    readonly=True,
                    copy=False,
                )
                confirm_user_id = fields.Many2one(
                    string="Confirmation By",
                    comodel_name="res.users",
                    readonly=True,
                    copy=False,
                )
                approve_date = fields.Datetime(
                    string="Approved Date",
                    readonly=True,
                    copy=False,
                )
                approve_user_id = fields.Many2one(
                    string="Approved By",
                    comodel_name="res.users",
                    readonly=True,
                    copy=False,
                )
                ${9:open}_date = fields.Datetime(
                    string="${10:Opened} Date",
                    readonly=True,
                    copy=False,
                )
                ${9:open}_user_id = fields.Many2one(
                    string="${10:Opened} By",
                    comodel_name="res.users",
                    readonly=True,
                    copy=False,
                )
                ${11:done}_date = fields.Datetime(
                    string="${12:Done} Date",
                    readonly=True,
                    copy=False,
                )
                ${11:done}_user_id = fields.Many2one(
                    string="${12:Done} By",
                    comodel_name="res.users",
                    readonly=True,
                    copy=False,
                )
                cancel_date = fields.Datetime(
                    string="Cancellation Date",
                    readonly=True,
                    copy=False,
                )
                cancel_user_id = fields.Many2one(
                    string="Cancellation By",
                    comodel_name="res.users",
                    readonly=True,
                    copy=False,
                )

                # Policy Fields
                confirm_ok = fields.Boolean(
                    string="Can Confirm",
                    compute="_compute_policy",
                )
                approve_ok = fields.Boolean(
                    string="Can Approve",
                    compute="_compute_policy",
                )
                ${9:open}_ok = fields.Boolean(
                    string="Can ${13:Open}",
                    compute="_compute_policy",
                )
                ${11:done}_ok = fields.Boolean(
                    string="Can ${14:Finish}",
                    compute="_compute_policy",
                )
                cancel_ok = fields.Boolean(
                    string="Can Cancel",
                    compute="_compute_policy",
                )
                restart_ok = fields.Boolean(
                    string="Can Restart",
                    compute="_compute_policy",
                )

                @api.model
                def create(self, values):
                    _super = super(${1:NewModule}, self)
                    result = _super.create(values)
                    sequence = result._create_sequence()
                    result.write({
                        "name": sequence,
                    })
                    return result

                @api.multi
                def unlink(self):
                    strWarning = _("You can only delete data on draft state")
                    for document in self:
                        if document.state != "draft":
                            if not self.env.context.get("force_unlink", False):
                                raise UserError(strWarning)
                    _super = super(${1:NewModule}, self)
                    _super.unlink()

                @api.multi
                def button_confirm(self):
                    for document in self:
                        document.write(document._prepare_confirm_data())

                @api.multi
                def button_approve(self):
                    for document in self:
                        document.write(document._prepare_approve_data())

                @api.multi
                def button_${9:open}(self):
                    for document in self:
                        document.write(document._prepare_${9:open}_data())

                @api.multi
                def button_${11:done}(self):
                    for document in self:
                        document.write(document._prepare_${11:done}_data())

                @api.multi
                def button_cancel(self):
                    for document in self:
                        document.write(document._prepare_cancel_data())

                @api.multi
                def button_restart(self):
                    for document in self:
                        document.write(document._prepare_restart_data())

                @api.multi
                def _prepare_confirm_data(self):
                    self.ensure_one()
                    result = {
                        "state": "confirm",
                        "confirm_date": fields.Datetime.now(),
                        "confirm_user_id": self.env.user.id,
                    }
                    return result

                @api.multi
                def _prepare_approve_data(self):
                    self.ensure_one()
                    result = {
                        "state": "approve",
                        "approve_date": fields.Datetime.now(),
                        "approve_user_id": self.env.user.id,
                    }
                    return result

                @api.multi
                def _prepare_${9:open}_data(self):
                    self.ensure_one()
                    result = {
                        "state": "${9:open}",
                        "${9:open}_date": fields.Datetime.now(),
                        "${9:open}_user_id": self.env.user.id,
                    }
                    return result

                @api.multi
                def _prepare_${11:done}_data(self):
                    self.ensure_one()
                    result = {
                        "state": "${11:done}",
                        "${11:done}_date": fields.Datetime.now(),
                        "${11:done}_user_id": self.env.user.id,
                    }
                    return result

                @api.multi
                def _prepare_restart_data(self):
                    self.ensure_one()
                    result = {
                        "state": "draft",
                        "confirm_date": False,
                        "confirm_user_id": False,
                        "approve_date": False,
                        "approve_user_id": False,
                        "${9:open}_date": False,
                        "${9:open}_user_id": False,
                        "${11:done}_date": False,
                        "${11:done}_user_id": False,
                    }
                    return result
        """
